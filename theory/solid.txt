S
Single responibility. 
One class - one purpose and do it well
Ex. class Order that shows orders, get them from db, print them -> Order, OrderRepository for db, OrderPrinter

O
Open/closed principle
Open to extend, closed to modification.
Ex. use interfaces -> DaoInterface and MySqlDao, PostgresDao, CloudDao, RestDao...

L
Liskov Substitution
Fucntions that use base classes should be able to use derived classes instead of base without knowing nothing about it.
Before method call conditions can't be extended in derived class
After conditions can't be weaken in derived class 
Ex. Square derived from Rectangle. Square class weaked condition to size of height and width. They became equal.

I
Interface Segregation
Client doesn't have to depend on interface methods he doesn't need. U should use more specific interfaces instead of one universal
Ex. One interface to send data and to flush results somewhere. U need to separate it.

D
Dependency invertion
High-level modules should not depend on low-level modules. Both should depend on abstractions.
Abstractions should not depend on details. Details should depend on abstractions.
Ex. In one class (method) we create another object of some class. -> create interface (abstraction) of created object and we can provide this realization of interface to the method or use container's dependency injection  
